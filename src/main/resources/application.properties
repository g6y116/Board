# DATABASE

# H2 콘솔의 접속을 허용할지의 여부이다. true로 설정한다.
spring.h2.console.enabled=true
# 콘솔 접속을 위한 URL 경로이다.
spring.h2.console.path=/h2-console
# 데이터베이스 접속을 위한 경로이다.
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
# 데이터베이스 접속시 사용하는 드라이버이다.
spring.datasource.driverClassName=org.h2.Driver
# 데이터베이스의 사용자명이다. (사용자명은 기본 값인 sa로 설정한다.)
spring.datasource.username=sa
# 데이터베이스의 패스워드이다. 로컬 개발 용도로만 사용하기 때문에 패스워드를 설정하지 않았다.
spring.datasource.password=

# JPA

# 데이터베이스 엔진 종류를 설정한다.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# 엔티티를 기준으로 테이블을 생성하는 규칙을 정의한다.
spring.jpa.hibernate.ddl-auto=create



# DB에 날리는 모든 쿼리(DDL, DML)를 보여준다
spring.jpa.properties.hibernate.show_sql=false
# 보여지는 쿼리를 예쁘게 포맷팅 해준다.
spring.jpa.properties.hibernate.format_sql=true
# 추가적인 주석을 표시해준다.
spring.jpa.properties.hibernate.use_sql_comments=true
# ?에 어떤 값이 들어갔는지 구체적으로 알고 싶을 때 사용한다.
logging.level.org.hibernate.type.descriptor.sql=trace



# 생성된 테이블에 데이터를 채워준다.
spring.jpa.defer-datasource-initialization=true
# always: 모든 데이터베이스에 sql 스크립트를 동작시킨다.
spring.sql.init.mode=always



#create - 스프링부트 서버가 시작될때 모두 drop하고 다시 생성한다.
#create-drop - create와 동일하다. 하지만 종료시에도 모두 drop 한다.
#update - 엔티티의 변경된 부분만 적용한다.
#validate - 변경사항이 있는지 검사만 한다.
#none - 엔티티가 변경되더라도 데이터베이스를 변경하지 않는다.



# 암호화 사용하지 않음
spring.security.user.password={noop}your_plain_text_password